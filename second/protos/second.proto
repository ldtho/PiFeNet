syntax = "proto3";

package second.protos;
import "second/protos/losses.proto";
import "second/protos/box_coder.proto";
import "second/protos/target.proto";
import "second/protos/voxel_generator.proto";

message VoxelNet {
  string network_class_name = 1;
  VoxelGenerator voxel_generator = 2;
  message VoxelFeatureExtractor {
    string module_class_name = 1;
    repeated int32 num_filters = 2;
    bool with_distance = 3;
    int32 num_input_features = 4;
    int32 boost_channel_dim = 5;
    int32 reduction_rate = 6;
    bool use_paca_weight = 7;
    int32 num_point_per_voxel = 8;
    bool channel_att = 9;
    bool point_att = 10;
    bool task_aware_att = 11;
    repeated string pool_types = 12;
  }
  VoxelFeatureExtractor voxel_feature_extractor = 3;
  message MiddleFeatureExtractor {
    string module_class_name = 1;
    repeated int32 num_filters_down1 = 2;
    repeated int32 num_filters_down2 = 3;
    int32 num_input_features = 4;
    int32 downsample_factor = 5;
  }
  MiddleFeatureExtractor middle_feature_extractor = 4;
  message RPN {
    string module_class_name = 1;
    repeated int32 layer_nums = 2;
    repeated int32 layer_strides = 3;
    repeated int32 num_filters = 4;
    repeated double upsample_strides = 5;
    repeated int32 num_upsample_filters = 6;
    bool use_groupnorm = 7;
    int32 num_groups = 8;
    int32 num_input_features = 9;
    uint32 heads = 10;
    bool cca = 11;
    bool mhsa = 12;
    bool load_resnet_weight = 13;
    bool mhsa_refine = 14;
  }
  RPN rpn = 5;
  uint32 num_point_features = 6;
  bool use_sigmoid_score = 7;
  Loss loss = 8;
  bool encode_rad_error_by_sin = 9;
  bool encode_background_as_zeros = 10;
  bool use_direction_classifier = 11;
  float direction_loss_weight = 12;
  float pos_class_weight = 13;
  float neg_class_weight = 14;
  enum LossNormType {
    NormByNumExamples = 0;
    NormByNumPositives = 1;
    NormByNumPosNeg = 2;
    DontNorm = 3;
  }
  LossNormType loss_norm_type = 15;
  BoxCoder box_coder = 16;
  TargetAssigner target_assigner = 17;
  repeated float post_center_limit_range = 18;
  float direction_offset = 19;
  float sin_error_factor = 20;
  bool nms_class_agnostic = 21;
  int64 num_direction_bins = 22;
  float direction_limit_offset = 23;

  // deprecated in future
  bool lidar_input = 24;

}